#define LED_PARA_C
#include "LED_Para.h"

/*
文件布局：
fac_para.cfg //工厂参数--出厂前设置
user_para.cfg //用户参数--用户可自己设置

prog_property00.cfg //节目0属性
...
prog_propertyAA.cfg //节目N数性

show-00-00-00.dat //文件名意义: show-节目号-分区号-文件号
......
show-AA-BB-CC.dat    

fac_para文件格式:
cmd=01 屏长度与颜色帧

use_para.cfg 文件格式
cmd=0x02 屏地址，可读可写
cmd=0x03 屏IP参数，可读可写
cmd=0x04 通信速率，可读可写
cmd=0x05 定时开关机，可读可写
cmd=0x07 亮度设置，可读可写

prog_property00.cfg 文件格式

*/
#if 0
//从帧中读取工厂参数和用户参数到变量中
//Ctrl控制码
//Frame帧起始
//Len帧长度
void Read_Frame_Para(INT8U Ctrl, INT8U Frame[], INT16U Len)
{
  if(Ctrl EQ SCREEN_WH && Len >= Min_Size[Ctrl])
  	mem_cpy((INT8U *)&Screen_Para.Width, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //屏幕参数
  else if(Ctrl EQ SCREEN_ADDR && Len >= Min_Size[Ctrl])
  	mem_cpy((INT8U *)&Screen_Para.Addr, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //屏幕地址
  else if(Ctrl EQ SCREEN_IP && Len >= Min_Size[Ctrl])
  	mem_cpy(((INT8U *)&Screen_Para.IP, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //IP地址	
  else if(Ctrl EQ SCREEN_BAUD && Len >= Min_Size[Ctrl])
  	mem_cpy(((INT8U *)&Screen_Para.Baud, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //通信波特率
  else if(Ctrl EQ	SCREEN_OC_TIME && Len >= Min_SIze[Ctrl]) 	
  	mem_cpy(((INT8U *)&Screen_Para.Open_Close_Time, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //定时开关机时间
  else if(Ctrl EQ SCREEN_LIGNTNESS && Len >= Min_Size[Ctrl])
  	mem_cpy(((INT8U *)&Screen_Para.Open_Close_Time, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //定时开关机时间
  else if(Ctrl EQ SCREEN_TIME && Len >= Min_Size[Ctrl]
  	;//mem_cpy(((INT8U *)&Screen_Para.Open_Close_Time, Frame, Min_Size[Ctrl], (INT8U *)&Screen_Para, sizeof(Screen_Para)); //定时开关机时间
  else
  	{
  		ASSERT_FAILED();
  		return;
  	}	
}

//读取所有的屏幕参数
void Read_Screen_Para()
{
	
}

//读取节目参数
//Prog节目号
//返回值1 表示读取成功。0表示没有这个节目或者读取不成功
INT8U Read_Program_Para(INT8U Program_No)
{
	
	
}

//读取显示参数--调用Read_Prog_Para
INT8U Update_Program_Para()
{
	INT8U i;
	
	for(i = 0; i < MAX_PROGRAM_NUM; i ++)
	{
		if(Read_Program_Para(i)) //读取成功
		{
			if(Check_Program_Time())//当前时间是否为节目播放时间?
				return 1;
		}
	}
	
	return 0;
	
}

//检查是否需要更新节目参数
INT8U Check_Update_Program_Para()
{
	static S_Int8U Hour_Bak = {CHK_BYTE, 0xFF, CHK_BYTE};
  
  if(Hour_Bak.Var EQ Cur_Time.Time[T_HOUR])
  	return;
 
  Debug_Print("每小时检测更新节目参数");
  Hour_Bak.Var = Cur_Time.Time[T_HOUR]; 	
  if(Check_Program_Time() EQ 0) //当前时间是否在节目播放时间中?
  {	
    if(Update_Program_Para())
    	Debug_Print("更新当前节目参数成功!");
    else
    	Debug_Print("当前无可运行节目参数");
  }
}


//读取一屏显示数据
//prog节目号
//area分区号
INT16U Update_Show_Data_Bak(INT8U Program_No, INT8U Area_No)
{
	
	
}

//设置文件的停留时间
void Set_File_Stay_Time(INT8U Area_No, INT16U ms)
{
	File_Para[i].Stay_Time = ms;
	File_Para[i].Stay_Time = FIle_Para[i].Stay_Time | 0x80;
}

//检测更新显示备份区数据
void Check_Update_Show_Data_Bak()
{
	INT8U i;
	
	for(i = 0; i < Program_Para.Area_Num && i < MAX_AREA_NUM; i ++)
	{
		//目前显示的步进已经到100%并且目前停留时间已经达到文件的停留时间，则认为该屏已经显示完毕，切换到下屏
		if(Get_File_Stay_Time(i) < MIN_STAY_TIME)
			Set_File_Stay_Time(i, MIN_STAY_TIME);
			
		if(Area_Status[i].Step >= 100 && Area_Status[i].Stay_Time >= Get_File_Stay_Time(i))
	    Update_Show_Data_Bak(Program_Para.Program_No, i) 
	}	
}
#endif
